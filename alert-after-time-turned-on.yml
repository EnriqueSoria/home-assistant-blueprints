blueprint:
  name: Device On Reminder Loop Until Off (Testable Delay)
  description: >
    When a device is turned on, wait X hours (supports fractions), then send an actionable notification
    to turn off or delay. Loops until device is off.
  domain: automation
  input:
    target_device:
      name: Target Device
      description: The switch or device to monitor
      selector:
        entity:
          domain: switch
    delay_hours:
      name: Delay Hours
      description: Number of hours to wait before sending the notification (supports decimals for testing)
      default: 0.1
      selector:
        number:
          min: 1
          max: 3600
          step: 1
          unit_of_measurement: seconds
    notify_device:
      name: Notify Device
      description: Device to receive the actionable notification (must be mobile app)
      selector:
        device:
          integration: mobile_app

mode: restart

variables:
  delay_seconds: "{{ delay_hours | int }}"
  target_entity: !input target_device
  notify_target: !input notify_device

trigger:
  - platform: state
    entity_id: !input target_device
    to: "on"

action:
  - repeat:
      until:
        - condition: device
          type: is_off
          entity_id: !input target_device
          device_id: !input target_device
          domain: light
      sequence:
        - delay:
            seconds: "{{ delay_seconds }}"

        - service: notify.mobile_app_{{ device_id('notify_device') }}
          data:
            message: "{{ state_attr(target_entity, 'friendly_name') or target_entity }} has been on for {{ delay_hours }} hours."
            title: "Device Still On"
            data:
              actions:
                - action: "TURN_OFF"
                  title: "Turn Off"
                - action: "DELAY"
                  title: "Remind Me Later"
              tag: "reminder-{{ target_entity }}"

        - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: TURN_OFF
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: DELAY
          timeout: "01:00:00"
          continue_on_timeout: true

        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ wait.trigger.event.data.action == 'TURN_OFF' }}"
              sequence:
                - service: switch.turn_off
                  target:
                    entity_id: !input target_device
