blueprint:
  name: Device On Reminder Loop
  description: >
    When a device is turned on, this automation waits X hours, then sends an actionable notification
    that gives the option to turn the device off or delay for another X hours (looping until turned off).
  domain: automation
  input:
    target_device:
      name: Target Device
      description: The switch or device to monitor
      selector:
        entity:
          domain: switch
    delay_hours:
      name: Delay Hours
      description: Number of hours to wait before sending notification
      default: 1
      selector:
        number:
          min: 0.5
          max: 24
          step: 0.5
          unit_of_measurement: hours
    notify_device:
      name: Notify Device
      description: The device to send the actionable notification to
      selector:
        device:
          integration: mobile_app

mode: restart

variables:
  delay_seconds: "{{ (delay_hours | float * 3600) | int }}"

trigger:
  - platform: state
    entity_id: !input target_device
    to: "on"

action:
  - repeat:
      while:
        - condition: state
          entity_id: !input target_device
          state: "on"
      sequence:
        - delay:
            seconds: "{{ delay_seconds }}"
        - service: notify.mobile_app_{{ device_id('notify_device') }}
          data:
            message: "{{ state_attr(target_device, 'friendly_name') or target_device }} has been on for {{ delay_hours }} hours."
            title: "Device Reminder"
            data:
              actions:
                - action: "TURN_OFF"
                  title: "Turn Off"
                - action: "DELAY"
                  title: "Remind Me Later"
              tag: "device-reminder-{{ target_device }}"

        - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: TURN_OFF
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: DELAY
          timeout: "01:00:00"
          continue_on_timeout: true

        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ wait.trigger.event.data.action == 'TURN_OFF' }}"
              sequence:
                - service: switch.turn_off
                  target:
                    entity_id: !input target_device
